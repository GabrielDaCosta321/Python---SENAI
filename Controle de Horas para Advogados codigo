from datetime import datetime, timedelta
import json
import os

class ControleDeHoras:
    def __init__(self, arquivo="registros_horas.json"):
        self.arquivo = arquivo
        self.registros = self.carregar_registros()

    def carregar_registros(self):
        """Carregar os registros de horas salvos no arquivo JSON."""
        if os.path.exists(self.arquivo):
            with open(self.arquivo, 'r') as file:
                return json.load(file)
        return {}

    def salvar_registros(self):
        """Salvar os registros de horas no arquivo JSON."""
        with open(self.arquivo, 'w') as file:
            json.dump(self.registros, file, indent=4)

    def registrar_horas(self, advogado, cliente, tarefa, inicio, fim):
        """Registrar as horas trabalhadas por um advogado em uma tarefa para um cliente."""
        if advogado not in self.registros:
            self.registros[advogado] = []

        tempo_trabalhado = fim - inicio
        registro = {
            "cliente": cliente,
            "tarefa": tarefa,
            "inicio": inicio.strftime("%Y-%m-%d %H:%M:%S"),
            "fim": fim.strftime("%Y-%m-%d %H:%M:%S"),
            "tempo_trabalhado": str(tempo_trabalhado)
        }
        self.registros[advogado].append(registro)
        self.salvar_registros()
        print(f"Registro de {advogado} adicionado com sucesso para o cliente {cliente}.")

    def calcular_total_horas(self, advogado, periodo="dia"):
        """Calcular o total de horas trabalhadas por um advogado em um período específico."""
        if advogado not in self.registros:
            print(f"Nenhum registro encontrado para o advogado {advogado}.")
            return

        total_horas = timedelta()
        agora = datetime.now()

        for registro in self.registros[advogado]:
            inicio = datetime.strptime(registro["inicio"], "%Y-%m-%d %H:%M:%S")
            fim = datetime.strptime(registro["fim"], "%Y-%m-%d %H:%M:%S")
            tempo_trabalhado = fim - inicio

            if periodo == "dia" and inicio.date() == agora.date():
                total_horas += tempo_trabalhado
            elif periodo == "semana" and inicio.isocalendar()[1] == agora.isocalendar()[1]:
                total_horas += tempo_trabalhado
            elif periodo == "mes" and inicio.month == agora.month:
                total_horas += tempo_trabalhado

        print(f"Total de horas trabalhadas por {advogado} no período de {periodo}: {total_horas}")
        return total_horas

    def gerar_relatorio(self, advogado):
        """Gerar relatório das horas trabalhadas por tarefa e cliente."""
        if advogado not in self.registros:
            print(f"Nenhum registro encontrado para o advogado {advogado}.")
            return
        
        relatorio = {}
        for registro in self.registros[advogado]:
            cliente = registro["cliente"]
            tarefa = registro["tarefa"]
            tempo_trabalhado = timedelta(hours=int(registro["tempo_trabalhado"].split(":")[0]), 
                                         minutes=int(registro["tempo_trabalhado"].split(":")[1]))

            if cliente not in relatorio:
                relatorio[cliente] = {}

            if tarefa not in relatorio[cliente]:
                relatorio[cliente][tarefa] = timedelta()

            relatorio[cliente][tarefa] += tempo_trabalhado
        
        print(f"\nRelatório de horas trabalhadas por {advogado}:")
        for cliente, tarefas in relatorio.items():
            print(f"\n  Cliente: {cliente}")
            for tarefa, tempo in tarefas.items():
                print(f"    Tarefa: {tarefa} - {tempo}")
        return relatorio


# Exemplo de uso
controle_horas = ControleDeHoras()

# Registrar algumas horas de trabalho
controle_horas.registrar_horas(
    advogado="Gabriel da Costa", 
    cliente="Empresa X", 
    tarefa="Revisão de contrato", 
    inicio=datetime(2025, 8, 20, 9, 0), 
    fim=datetime(2025, 8, 20, 11, 30)
)

controle_horas.registrar_horas(
    advogado="Gabriel da Costa", 
    cliente="Empresa Y", 
    tarefa="Consultoria jurídica", 
    inicio=datetime(2025, 8, 20, 14, 0), 
    fim=datetime(2025, 8, 20, 17, 30)
)

controle_horas.registrar_horas(
    advogado="Gabriel da Costa", 
    cliente="Empresa X", 
    tarefa="Revisão de contrato", 
    inicio=datetime(2025, 8, 21, 10, 0), 
    fim=datetime(2025, 8, 21, 12, 0)
)

controle_horas.registrar_horas(
    advogado="Gabriel da Costa", 
    cliente="Cliente Z", 
    tarefa="Assessoria jurídica", 
    inicio=datetime(2025, 8, 20, 9, 30), 
    fim=datetime(2025, 8, 20, 12, 0)
)

# Calcular horas trabalhadas por dia, semana e mês
controle_horas.calcular_total_horas("Gabriel da Costa", periodo="dia")
controle_horas.calcular_total_horas("Gabriel da Costa", periodo="semana")
controle_horas.calcular_total_horas("Gabriel da Costa", periodo="mes")

# Gerar relatório de horas trabalhadas
controle_horas.gerar_relatorio("Gabriel da Costa")
